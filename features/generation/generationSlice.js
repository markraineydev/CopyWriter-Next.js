import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import {
  favouriteTemplateAPI,
  fetchFavTemplates,
  generationAPIData,
  ratingAPIData,
  ratingDoc,
  removeFavouriteTemplateAPI,
  totalCreditsAPI,
} from './generationAPI';

const initialState = {
  generationData: null,
  favouriteTemplate: [],
  currentPlanWordCount: {},
  generationLoading: false,
  totalCredits: null,
  yearIntervalWord: null,
  planIntervalYearly: null,
  periodStart: null,
  lastOutputDate: null,
  yearIntervalIndex: null,
};

export const generationAPI = createAsyncThunk(
  'genration/generator',
  async ({ templateBody, numOfOutputs, projectId }, { getState }) => {
    const { uid } = getState().auth.authProfile;
    return await generationAPIData({ uid, templateBody, numOfOutputs, projectId });
  },
);

export const contentRating = createAsyncThunk(
  'outputs/rating-content',
  async ({ contentId, ratingType, outputId }, { getState }) => {
    const { uid } = getState().auth.authProfile;
    await ratingAPIData({ uid, contentId, ratingType, outputId });
  },
);

export const favouriteTemplateData = createAsyncThunk('generation/generationfav', async ({ id, uid }) => {
  await favouriteTemplateAPI({ id, uid });
});

export const removefavouriteTemplateData = createAsyncThunk('generation/generationremove', async ({ uid, id }) => {
  await removeFavouriteTemplateAPI({ uid, id });
});
export const readFavouriteTemplates = createAsyncThunk('generation/readfav', async ({ uid }, { dispatch }) => {
  fetchFavTemplates({ uid, dispatch });
});
export const totalUserCredits = createAsyncThunk('generation/credits', async ({ uid }, { dispatch }) => {
  totalCreditsAPI({ uid, dispatch });
});

export const generatorSlice = createSlice({
  name: 'generation',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    createGenerationData: (state, action) => {
      state.initialState = action.payload;
    },
    fetchfavouriteTemplate: (state, { payload }) => {
      state.favouriteTemplate = payload.templatesData;
      state.currentPlanWordCount = payload.currentPlanOutputWords;
      state.planIntervalYearly = payload.planInterval;
      state.yearIntervalWord = payload.yearCurrentIntervalOutputWords;
      state.periodStart = payload.periodStart;
      state.lastOutputDate = payload.lastOutputDate;
      state.yearIntervalIndex = payload.yearIntervalIndex;
    },
    fetchTotalCredits: (state, { payload }) => {
      state.totalCredits = payload.currentPlanOutputWords;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(generationAPI.pending, (state) => {
        state.generationLoading = true;
      })
      .addCase(generationAPI.fulfilled, (state, { payload }) => {
        state.generationLoading = false;
        state.generationData = payload.outputData;
      })
      .addCase(generationAPI.rejected, (state, { payload }) => {
        state.generationLoading = false;
        state.generationData = payload.outputData;
      });
  },
});

export const { createGenerationData, fetchfavouriteTemplate, fetchTotalCredits } = generatorSlice.actions;

export default generatorSlice.reducer;

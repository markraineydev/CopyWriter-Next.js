import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import {
  createSignInWithEmail,
  deleteInviteCollectionAPI,
  fbSignIn,
  fetchUserData,
  handleResetPasswordAPI,
  loginTeamUser,
  memberTeamId,
  resetPasswordAPI,
  signInusingEmailAndPassword,
} from './authApi';

const initialState = {
  authProfile: null,
  authLoginLoading: false,
  authLoginwithEmailLoading: false,
  userData: {},
  error: null,
  teamId: null,
  docId: null,
  resetMessage: null,
  inviteMember: null,
  oobCode: null,
  inviteMemberMode: null,
};

export const authLogin = createAsyncThunk('auth/signIn', async ({}, { dispatch }) => {
  const response = await fbSignIn({ dispatch });
  return response;
});
export const authLoginWithEmail = createAsyncThunk(
  'auth/signInwithemail',
  async ({ name, email, password }, { dispatch }) => {
    const response = await createSignInWithEmail({ name, email, password, dispatch });
    return response;
  },
);

export const authLoginWithoutPassword = createAsyncThunk(
  'auth/signInwithoutpassword',
  async ({ providerId, email, uid, emailVerified, displayName }, { dispatch }) => {
    await loginTeamUser({ providerId, email, uid, displayName, emailVerified, dispatch });
  },
);

export const fetchTeamOwnerId = createAsyncThunk('auth/addteamId', async ({ email }, { dispatch }) => {
  console.log('email', email);
  await memberTeamId({ email, dispatch });
});
export const deleteInviteCollection = createAsyncThunk('auth/delete', async ({ email, docId }, { dispatch }) => {
  await deleteInviteCollectionAPI({ email, docId, dispatch });
});
export const readUser = createAsyncThunk('projects/readUserData', async ({ uid }, { dispatch }) => {
  fetchUserData({ uid, dispatch });
});
export const authSignInWithEmail = createAsyncThunk('auth/signInusinghemail', async ({ email, password }) => {
  const response = await signInusingEmailAndPassword({ email, password });
  return response;
});

export const resetPassword = createAsyncThunk('auth/resetpassword', async ({ email }) => {
  await resetPasswordAPI({ email });
});
export const handleResetPassword = createAsyncThunk(
  'auth/handleresetpassword',
  async ({ password, actionCode }, { dispatch }) => {
    await handleResetPasswordAPI({ password, actionCode, dispatch });
  },
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    alreadySignInProfile: (state, action) => {
      state.authProfile = action.payload;
    },
    readUserDataSuccess: (state, { payload }) => {
      state.userData = payload.userData;
    },
    readteamId: (state, { payload }) => {
      state.teamId = payload.teamId;
      state.docId = payload.docId;
    },
    resetPasswordMessage: (state, { payload }) => {
      state.resetMessage = payload;
    },
    inviteteamMember: (state, { payload }) => {
      state.inviteMember = payload;
    },
    resetPasswordCode: (state, { payload }) => {
      state.oobCode = payload;
    },
    invitemode: (state, { payload }) => {
      state.inviteMemberMode = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(authLogin.pending, (state) => {
        state.authLoginLoading = true;
      })
      .addCase(authLogin.fulfilled, (state, { payload }) => {
        state.authLoginLoading = false;
        state.authProfile = { ...payload };
      })
      .addCase(authLoginWithEmail.pending, (state) => {
        state.authLoginwithEmailLoading = true;
      })
      .addCase(authLoginWithEmail.fulfilled, (state, { payload }) => {
        state.authLoginwithEmailLoading = false;
        state.authProfile = { ...payload };
      })
      .addCase(authLoginWithEmail.rejected, (state, { payload }) => {
        state.authLoginwithEmailLoading = false;
        state.authProfile = { ...payload };
      })
      .addCase(authSignInWithEmail.pending, (state) => {
        state.authLoginwithEmailLoading = true;
      })
      .addCase(authSignInWithEmail.fulfilled, (state, { payload }) => {
        state.authLoginwithEmailLoading = false;
        state.authProfile = { ...payload };
      })
      .addCase(authLoginWithoutPassword.pending, (state) => {
        state.authLoginLoading = true;
      })
      .addCase(authLoginWithoutPassword.fulfilled, (state) => {
        state.authLoginLoading = false;
      })
      .addCase(handleResetPassword.pending, (state) => {
        state.authLoginwithEmailLoading = true;
      })
      .addCase(handleResetPassword.fulfilled, (state) => {
        state.authLoginwithEmailLoading = false;
      });
  },
});

export const {
  alreadySignInProfile,
  readUserDataSuccess,
  readteamId,
  resetPasswordMessage,
  inviteteamMember,
  resetPasswordCode,
  invitemode,
} = authSlice.actions;

export default authSlice.reducer;
